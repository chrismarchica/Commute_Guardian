services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: commute-guardian-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: commute_guardian
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d commute_guardian"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - commute-guardian

  # Backend Spring Boot Application
  backend:
    build:
      context: ./backend
      dockerfile: ../Dockerfile.backend
    container_name: commute-guardian-backend
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_URL: jdbc:postgresql://postgres:5432/commute_guardian
      DB_USER: postgres
      DB_PASS: postgres
      
      # MBTA API Configuration (use environment variables or defaults)
      MBTA_API_BASE: ${MBTA_API_BASE:-https://api-v3.mbta.com}
      MBTA_API_KEY: ${MBTA_API_KEY:-}
      GTFS_STATIC_URL: ${GTFS_STATIC_URL:-https://cdn.mbta.com/MBTA_GTFS.zip}
      GTFS_RT_TRIP_UPDATES_URL: ${GTFS_RT_TRIP_UPDATES_URL:-https://cdn.mbta.com/realtime/TripUpdates.pb}
      GTFS_RT_VEHICLE_POSITIONS_URL: ${GTFS_RT_VEHICLE_POSITIONS_URL:-https://cdn.mbta.com/realtime/VehiclePositions.pb}
      GTFS_RT_FETCH_INTERVAL: ${GTFS_RT_FETCH_INTERVAL:-60s}
      
      # CORS Configuration
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://frontend:3000
      
      # JVM Options
      JAVA_OPTS: -Xmx512m -Xms256m
    ports:
      - "8080:8080"
    volumes:
      - ./fixtures:/app/fixtures:ro
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - commute-guardian

  # Frontend Next.js Application
  frontend:
    build:
      context: ./frontend
      dockerfile: ../Dockerfile.frontend
    container_name: commute-guardian-frontend
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_BASE_URL: http://localhost:8080
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - commute-guardian

  # Redis (Optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: commute-guardian-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - commute-guardian
    profiles:
      - with-redis

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: commute-guardian-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - commute-guardian
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local

networks:
  commute-guardian:
    driver: bridge
    name: commute-guardian-network
